"use strict";/**
 * Main funcitons to show/choose cards
 * Optional depends: utils.js //EmojiTools
 *
 * Usage:
 *   (() => new CardEditor({
 *     initialValues: {
 *      cardId: 'Z2lkOi8vc2hvcGlmeS9Qcm9kdWN0VmFyaWFudC80MTU5OTY5MTA5NjI1OA==',
 *      cardMessage: 'Message'
 *     },
 *     title: 'Add a free <b>gift card</b>',
 *     saveBtnLabel: 'Checkout',
 *     onSelect: (data) => console.log(data),
 *     readyCallback: (editor) => {
 *       showCardEditor.addEventListener('click', () => {
 *         editor.openSelector();
 *       });
 *     },
 *   }))();
 */ // eslint-disable-next-line no-unused-vars
class CardEditor{constructor(a){let{initialValues:b,title:c,saveBtnLabel:d,onSelect:e,onClose:f,readyCallback:g}=a;/**
     * Options
     */ // CARDS | MESSAGE
/* Initialize Card values */this.maxlengthMsg=250,this.allowEmojis=!1,this.defaultTitle=c||"SELECT YOUR DESIGN",this.saveLabel=d||"Save changes",this.cardsUrl="/cards/greeting-cards/index.html",this.firstOpen="CARDS",this.errorMessagesActives=[],this.errorMessages={cardNotSelected:"<span class=\"i warning-circle\"></span>Sorry, You have not selected a card, please select or choose no card option",blankCard:"<span class=\"i question\"></span>Did you mean to leave the message blank?<br/>\n              Please check your message or select the 'Leave Card Blank Inside' option",noEmojis:"<span class=\"i warning-circle\"></span>Sorry, we don't currently support Emojis, so they will be removed"},this.categoryId="",this.cardSKU="",this.cardId=b&&b.cardId||"",this.cardMessage=b&&b.cardMessage||"",this.leaveBlank=b&&b.leaveBlank||!1,this.noCard=!1,this.readyCallback="function"==typeof g?g.bind(this):()=>null,this.onSelect="function"==typeof e?e.bind(this):()=>null,this.onClose="function"==typeof f?f.bind(this):()=>null,this.createEditor()}finish(){if(""===this.cardId&&!this.noCard)return void this.infoMessages(this.errorMessages.cardNotSelected);if(""===this.cardMessage&&!this.leaveBlank)return void this.infoMessages(this.errorMessages.blankCard);this.closeSelector(null,!0);const a={noCard:this.noCard,cardId:this.cardId,cardSKU:this.cardSKU,categoryId:this.categoryId,cardMessage:this.cardMessage,leaveBlank:this.leaveBlank,previewUrl:this.previewUrl};this.onSelect(a,this)}destroy(){this.cardsContainer.remove()}infoMessages(a){let b=!!(1<arguments.length&&arguments[1]!==void 0)&&arguments[1];if(a&&""!==a){const c=this.errorMessagesActives.indexOf(a);-1<c?b&&this.errorMessagesActives.splice(c,1):!b&&this.errorMessagesActives.push(a),0<this.errorMessagesActives.length?(this.mensageInfo.innerHTML=this.errorMessagesActives.join("<br />"),this.mensageInfo.classList.remove("hide")):(this.mensageInfo.innerHTML="",this.mensageInfo.classList.add("hide"))}}hasEmoji(){if("undefined"==typeof EmojiTools)return!1;const a=new EmojiTools;return a.hasEmoji(this.cardMessage)?(this.infoMessages(this.errorMessages.noEmojis),!0):(this.infoMessages(this.errorMessages.noEmojis,!0),!1)}cleanEmojis(){if("undefined"!=typeof EmojiTools){const a=new EmojiTools;this.cardMessage=a.stripEmoji(this.cardMessage),this.messageTextField.value=this.cardMessage,this.infoMessages(this.errorMessages.noEmojis,!0)}}handleBlankMessage(a){"object"==typeof a&&(this.leaveBlank=a.target.checked),this.leaveBlank?(this.messageCounter.classList.add("hide"),this.messageTextField.value="",this.cardMessage="",this.messageTextField.setAttribute("placeholder","No message on card"),this.messageTextField.disabled=!0,this.infoMessages(this.errorMessages.blankCard,!0)):(this.messageCounter.classList.remove("hide"),this.messageTextField.setAttribute("placeholder","Type your message..."),this.messageTextField.disabled=!1,this.messageCounter.innerText="".concat(this.cardMessage.length,"/").concat(this.maxlengthMsg))}noCardOption(){this.noCard=!0,this.leaveBlank=!0,this.cardId="",this.cardSKU="",this.categoryId="",this.cardMessage="",this.previewUrl="",this.cardFormNoCard.classList.remove("hide"),this.cardForm.classList.add("hide"),this.closeCardsBox(),this.markSelectedCard()}enterMessage(a){let{target:b}=a;this.cardMessage=b.value,this.messageCounter.innerText="".concat(this.cardMessage.length,"/").concat(this.maxlengthMsg),this.checkMessage(!1),this.infoMessages(this.errorMessages.blankCard,!0)}checkMessage(a){this.allowEmojis||this.hasEmoji(),a&&this.cleanEmojis()}selectCard(a){let{target:b}=a;const c=b.parentNode,d=c.getAttribute("data-id"),e=c.getAttribute("data-sku");if(d){const a=c.querySelector("img");this.cardId=d,this.cardSKU=e,this.previewUrl=a.src,this.previewCard.src=this.previewUrl,this.markSelectedCard(),this.openMessageBox()}}selectCategory(a){let{target:b}=a;if("li"===b.tagName.toLowerCase()){const a=b.getAttribute("data-category");a&&"0"!==a&&(// MOBILE set category as selected and display cards
// Mark selected category btn
// Show selected group
this.categoryId=a,this.categoryTitle.innerText=b.textContent,this.categoriesBox.classList.add("selected"),this.closeCardSelBtn.classList.add("hidden-sm"),this.backBtn.classList.remove("hidden-sm"),Array.from(this.categoryBtns).forEach(a=>{b.isEqualNode(a)?a.classList.add("selected"):a.classList.remove("selected")}),Array.from(this.cardGroups).forEach(a=>{this.categoryId===a.getAttribute("data-category")?a.classList.add("show"):a.classList.remove("show")}))}}openCardsBox(){return this.noCard&&(this.cardFormNoCard.classList.add("hide"),this.cardForm.classList.remove("hide")),"MESSAGE"===this.firstOpen?(this.cardMessageBox.classList.remove("show"),void this.cardSelectBox.classList.add("show")):void(this.overlay.classList.add("show"),this.bodyEl.classList.add("stop-scrolling"),this.cardSelectBox.classList.add("show"))}openMessageBox(){this.cardSelectBox.classList.remove("show"),this.overlay.classList.add("show"),this.bodyEl.classList.add("stop-scrolling"),this.cardMessageBox.classList.add("show")}openSelector(){"CARDS"===this.firstOpen?this.openCardsBox():this.openMessageBox()}closeCardsBox(){return"CARDS"===this.firstOpen||this.noCard?(this.cardSelectBox.classList.remove("show"),void this.openMessageBox()):void(this.cardSelectBox.classList.remove("show"),this.overlay.classList.remove("show"),this.bodyEl.classList.remove("stop-scrolling"))}closeMessageBox(){return"MESSAGE"===this.firstOpen?(this.cardMessageBox.classList.remove("show"),void this.openCardsBox()):void(this.overlay.classList.remove("show"),this.bodyEl.classList.remove("stop-scrolling"),this.cardMessageBox.classList.remove("show"))}closeSelector(){let a=!!(1<arguments.length&&arguments[1]!==void 0)&&arguments[1];this.cardMessageBox.classList.remove("show"),this.cardSelectBox.classList.remove("show"),this.overlay.classList.remove("show"),this.bodyEl.classList.remove("stop-scrolling"),a||this.onClose(this)}backToCategoryList(){this.categoriesBox.classList.remove("selected"),this.closeCardSelBtn.classList.remove("hidden-sm"),this.backBtn.classList.add("hidden-sm"),this.categoryTitle.innerHTML=this.defaultTitle}markSelectedCard(){if(""!==this.cardId){const a=this.cardsContainer.querySelector(".card[data-id='".concat(this.cardId,"']"));if(!a)return;const b=a.parentNode;this.cardSKU=a.getAttribute("data-sku"),this.categoryId=b.getAttribute("data-category"),b.classList.add("show");// update preview image
const c=a.querySelector("img");this.previewUrl=c.src,this.previewCard.src=this.previewUrl}// Mark selected category btn
Array.from(this.categoryBtns).forEach(a=>{a.getAttribute("data-category")===this.categoryId?a.classList.add("selected"):a.classList.remove("selected")}),Array.from(this.cards).forEach(a=>{const b=a.getAttribute("data-id");b===this.cardId?a.classList.add("selected"):a.classList.remove("selected")})}fetchCards(a){const b=new XMLHttpRequest;b.open("GET",this.cardsUrl),b.send(),b.addEventListener("loadend",()=>200===b.status&&""!==b.responseText.trim()?void a(b.responseText):void a(!1))}addEvents(){this.overlay.addEventListener("click",this.closeSelector.bind(this)),this.closeCardSelBtn.addEventListener("click",this.closeSelector.bind(this)),this.closeCardMesBtn.addEventListener("click",this.closeSelector.bind(this)),this.backBtn.addEventListener("click",this.backToCategoryList.bind(this)),this.cardsHolder.addEventListener("click",this.selectCard.bind(this)),this.categoriesBox.addEventListener("click",this.selectCategory.bind(this)),this.openCardsBoxBtns.forEach(a=>a.addEventListener("click",this.openCardsBox.bind(this))),this.saveBtn.addEventListener("click",this.finish.bind(this)),this.messageTextField.addEventListener("keyup",this.enterMessage.bind(this)),this.messageTextField.addEventListener("paste",this.enterMessage.bind(this)),this.messageTextField.addEventListener("blur",this.checkMessage.bind(this)),this.leaveBlankCheckbox.addEventListener("change",this.handleBlankMessage.bind(this)),this.noCardbtn.addEventListener("click",this.noCardOption.bind(this))}createEditor(){this.fetchCards(a=>{if(a){this.bodyEl=document.body,this.cardsContainer=document.createElement("div"),this.cardsContainer.setAttribute("class","cards-container"),this.overlay=document.createElement("div"),this.overlay.setAttribute("id","card-overlay"),this.overlay.setAttribute("class","card-overlay");const b=new DOMParser,c=b.parseFromString(a,"text/html");// Fill initial values
// if cardId not informed, use the default from shopify card collection
if(this.cardSelectBox=c.getElementById("card-select"),this.cardMessageBox=c.getElementById("card-message"),this.cardsContainer.appendChild(this.overlay),this.cardsContainer.appendChild(this.cardSelectBox),this.cardsContainer.appendChild(this.cardMessageBox),this.closeCardSelBtn=this.cardsContainer.querySelector(".action > span.close-card-select"),this.closeCardMesBtn=this.cardsContainer.querySelector(".action > span.close-card-message"),this.backBtn=this.cardsContainer.querySelector(".action > span.back"),this.openCardsBoxBtns=this.cardsContainer.querySelectorAll(".open-cards-button"),this.cardForm=this.cardsContainer.querySelector(".card-form"),this.cardFormNoCard=this.cardsContainer.querySelector(".card-form.no-card"),this.categoryTitle=this.cardSelectBox.querySelector(".box-title > .text"),this.categoriesBox=this.cardsContainer.querySelector(".categories"),this.categoryBtns=this.categoriesBox.getElementsByTagName("li"),this.cardsHolder=this.cardsContainer.querySelector(".cards"),this.cardGroups=this.cardsContainer.querySelectorAll(".card-group"),this.cardMessageTitle=this.cardMessageBox.querySelector(".box-title > .text"),this.cards=this.cardsContainer.querySelectorAll(".card"),this.noCardbtn=this.cardsContainer.querySelector(".no-card-btn"),this.messageTextField=this.cardsContainer.querySelector("#cardMessage"),this.messageTextField.setAttribute("maxlength",this.maxlengthMsg),this.messageCounter=this.cardsContainer.querySelector(".message-counter"),this.leaveBlankCheckbox=this.cardsContainer.querySelector("#leave-blank"),this.mensageInfo=this.cardsContainer.querySelector(".message-info"),this.previewCard=this.cardsContainer.querySelector("#preview-card"),this.saveBtn=this.cardsContainer.querySelector("#card-save"),this.bodyEl.appendChild(this.cardsContainer),""===this.cardId){const a=this.cardSelectBox.getAttribute("data-default-card-id");a&&(this.cardId=a)}this.cardMessageTitle.innerHTML=this.defaultTitle,this.categoryTitle.innerHTML=this.defaultTitle,this.saveBtn.innerText=this.saveLabel,this.messageTextField.value=this.cardMessage,this.leaveBlankCheckbox.checked=this.leaveBlank,this.addEvents(),this.handleBlankMessage(),this.markSelectedCard(),this.readyCallback(this)}else console.error("Error while fetching cards")})}}